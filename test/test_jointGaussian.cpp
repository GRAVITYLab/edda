#include <iostream>

#include "distributions/distribution.h"
#include "distributions/joint_gaussian.h"
#include "test_common.h"

using namespace std;
using namespace edda;
using namespace edda::dist;

int main(int argc, char* argv[]) {

    Real data[100][3] = {
        {  9.67221655,  19.97927698,  29.98747235},
        { 10.22558372,  20.04133711,  29.99689028},
        { 10.05517558,  19.84359825,  29.96713628},
        { 10.06207019,  20.04687824,  29.99707893},
        { 10.25388196,  20.16121944,  30.0178522 },
        { 10.13494804,  20.04113847,  30.00166961},
        { 10.02555515,  19.98764118,  30.0028269 },
        { 10.16161424,  20.03786764,  30.02165193},
        { 10.17596507,  20.0630162 ,  30.03595871},
        {  9.99344671,  19.95917224,  29.99244129},
        {  9.98448886,  20.05938327,  30.02391447},
        { 10.26179992,  20.05472754,  30.02472207},
        {  9.93183618,  19.97051187,  29.98456405},
        {  9.98183564,  20.0248368 ,  30.013144  },
        { 10.04515999,  20.01463621,  30.00594738},
        { 10.03430269,  19.94650731,  29.98049776},
        {  9.81235012,  19.93899367,  29.9876471 },
        {  9.9843961 ,  19.93300012,  29.97320774},
        { 10.17613589,  20.1231765 ,  30.0358648 },
        { 10.02166522,  20.01730618,  30.01866529},
        {  9.96739823,  19.96421596,  29.9901303 },
        { 10.16497141,  20.16922251,  30.00960937},
        { 10.09233639,  19.99888956,  29.99717682},
        { 10.25368754,  20.04267963,  30.00935689},
        {  9.90735137,  19.9463099 ,  29.98088744},
        { 10.23640935,  20.02950482,  30.01559369},
        {  9.89322627,  19.93049749,  29.95788305},
        { 10.1283273 ,  20.05332041,  30.01540408},
        { 10.09050975,  19.9668393 ,  30.01701713},
        { 10.03413406,  20.12024804,  30.0059102 },
        {  9.9940104 ,  19.9328849 ,  29.99453888},
        { 10.28399359,  20.15406131,  30.03362193},
        { 10.12402968,  20.07774422,  30.01661094},
        { 10.17671699,  20.08173602,  29.99373697},
        { 10.20829343,  20.02041501,  30.00253063},
        {  9.94586917,  19.92696002,  29.98859964},
        { 10.02299279,  20.10132606,  30.02239361},
        {  9.97982604,  19.95770855,  30.0015818 },
        {  9.99342986,  20.11774592,  30.02043278},
        { 10.00259328,  19.92681771,  29.99576579},
        { 10.29212867,  20.02897864,  30.01329459},
        {  9.96958939,  19.85182268,  29.96108885},
        { 10.11373279,  19.93089186,  29.98965599},
        {  9.72199292,  19.91617364,  29.98805704},
        {  9.68753655,  19.90076783,  30.00916853},
        {  9.94005158,  19.99312565,  29.98703018},
        {  9.83638922,  19.99343012,  30.00231861},
        {  9.72790505,  20.1046025 ,  29.98989749},
        {  9.72948209,  19.97135772,  30.00433464},
        { 10.08431109,  19.97721895,  30.01144839},
        {  9.88866173,  19.92858844,  29.98710872},
        { 10.22532867,  20.15362884,  30.02782892},
        {  9.84012962,  20.02791874,  29.99823517},
        {  9.92391489,  19.93723797,  29.95440912},
        {  9.88324355,  20.08283407,  30.00289873},
        {  9.86157816,  19.96131796,  30.00919978},
        {  9.95497674,  19.99018895,  29.98186716},
        { 10.16021336,  20.04736516,  30.02993326},
        {  9.74483507,  19.88147763,  29.97669073},
        { 10.18282683,  20.12247913,  30.03668744},
        { 10.14675094,  19.9948781 ,  30.01282402},
        { 10.01965797,  20.13893594,  30.02997223},
        {  9.97935095,  19.98594067,  29.97484438},
        {  9.91709642,  20.02077886,  29.99331218},
        { 10.29599621,  20.18411679,  30.0392494 },
        {  9.96936805,  19.84944302,  29.98467756},
        { 10.14958444,  20.08490195,  30.02125817},
        {  9.78055014,  19.93317178,  29.96551146},
        { 10.25077348,  20.11784452,  30.01865961},
        { 10.12803376,  20.03270834,  30.01191717},
        {  9.89802133,  19.9642465 ,  29.98324387},
        { 10.4294838 ,  20.06334923,  30.03245934},
        { 10.1527782 ,  20.03752802,  30.00355957},
        { 10.13337418,  20.10399525,  30.01349013},
        {  9.94435134,  20.0843222 ,  30.02868626},
        {  9.86764362,  19.96911148,  29.9932496 },
        {  9.82787455,  19.98528328,  29.96865951},
        {  9.92426945,  19.98109207,  29.99336209},
        { 10.42365426,  20.08365873,  30.02380715},
        {  9.92311542,  20.02822303,  30.00829515},
        {  9.70721729,  19.83949975,  29.97035427},
        {  9.89566884,  20.08767507,  30.01495123},
        { 10.11651403,  19.99315261,  29.99116632},
        {  9.8764151 ,  19.97976336,  30.00147435},
        {  9.83062678,  20.00754502,  29.98542625},
        {  9.620683  ,  19.90418498,  29.99258893},
        { 10.05059255,  19.96067492,  29.99174021},
        { 10.28641484,  20.03735335,  29.99094923},
        {  9.81215557,  20.00054063,  29.99835777},
        { 10.11350101,  20.09456094,  30.01782795},
        { 10.34607088,  20.0493746 ,  30.01821615},
        {  9.85289704,  19.99291627,  30.00379583},
        { 10.10706916,  20.1114887 ,  30.02566585},
        { 10.01951784,  19.95096844,  29.9898254 },
        {  9.9693457 ,  19.93391902,  29.97187915},
        {  9.89575164,  20.02853339,  30.0165497 },
        {  9.81760768,  19.9568857 ,  30.00905138},
        {  9.97072035,  20.00441675,  30.00646994},
        {  9.73495   ,  19.80586162,  29.98556009},
        {  9.98548329,  20.06772674,  30.00111723}
    };
    ///////********
    //The above samples are sample from this Joint Gaussian
    //mean = [10, 20, 30]
    //CovMatrix = [[0.025, 0.0075,0.00175], 
    //             [0.0075,0.007, 0.00135],
    //             [0.00175,0.00135,0.00043]]
    //We expect the re-calculated mean and cov are close to them

    Real* var0 = (Real*)malloc(sizeof(Real)*100);
	Real* var1 = (Real*)malloc(sizeof(Real)*100);
	Real* var2 = (Real*)malloc(sizeof(Real)*100);
    for( int i=0; i<100; i++ ){
        var0[i] = data[i][0];
        var1[i] = data[i][1];
        var2[i] = data[i][2];
    }
    std::vector<Real*> trainSamples;
    trainSamples.push_back(var0);
    trainSamples.push_back(var1);
    trainSamples.push_back(var2);
    JointGaussian gau = eddaComputeJointGMM(trainSamples, 100);

    std::cout << gau.getMean() << std::endl;
    std::cout << gau.getCovariance() << std::endl;
    return 0;
}